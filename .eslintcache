[{"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\index.js":"1","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Reducers.ts":"2","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\App.tsx":"3","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\AppSettingsReducer.ts":"4","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\MyDataReducer.ts":"5","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileReducer.ts":"6","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UsersReducer.ts":"7","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\PostsReducer.ts":"8","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Selectors\\Selectors.ts":"9","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Profile.tsx":"10","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\Auth.tsx":"11","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\Users.tsx":"12","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Navbar\\Navbar.tsx":"13","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\AuthDAL.ts":"14","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UsersAPI.ts":"15","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileDAL.ts":"16","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileData.tsx":"17","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\Posts.tsx":"18","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UserCard.tsx":"19","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UserFillter.tsx":"20","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\Paginator.tsx":"21","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\api.ts":"22","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileDataEditor.tsx":"23","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\AddPostForm.tsx":"24","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Status\\Status.tsx":"25","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Status\\StatusEditor.tsx":"26"},{"size":489,"mtime":1613417488366,"results":"27","hashOfConfig":"28"},{"size":836,"mtime":1613301083292,"results":"29","hashOfConfig":"28"},{"size":1056,"mtime":1613419450070,"results":"30","hashOfConfig":"28"},{"size":896,"mtime":1613301082974,"results":"31","hashOfConfig":"28"},{"size":2513,"mtime":1613302563536,"results":"32","hashOfConfig":"28"},{"size":2517,"mtime":1613423914834,"results":"33","hashOfConfig":"28"},{"size":3897,"mtime":1613310266491,"results":"34","hashOfConfig":"28"},{"size":560,"mtime":1613301083141,"results":"35","hashOfConfig":"28"},{"size":1191,"mtime":1613301083508,"results":"36","hashOfConfig":"28"},{"size":1833,"mtime":1613418827517,"results":"37","hashOfConfig":"28"},{"size":2068,"mtime":1613502804718,"results":"38","hashOfConfig":"28"},{"size":2000,"mtime":1613419450637,"results":"39","hashOfConfig":"28"},{"size":1131,"mtime":1613301083082,"results":"40","hashOfConfig":"28"},{"size":1015,"mtime":1613301083031,"results":"41","hashOfConfig":"28"},{"size":861,"mtime":1613419450653,"results":"42","hashOfConfig":"28"},{"size":1120,"mtime":1613423936011,"results":"43","hashOfConfig":"28"},{"size":1973,"mtime":1613420598781,"results":"44","hashOfConfig":"28"},{"size":1104,"mtime":1613301083111,"results":"45","hashOfConfig":"28"},{"size":1753,"mtime":1613301083342,"results":"46","hashOfConfig":"28"},{"size":986,"mtime":1613301083359,"results":"47","hashOfConfig":"28"},{"size":2415,"mtime":1613301083322,"results":"48","hashOfConfig":"28"},{"size":391,"mtime":1613501805641,"results":"49","hashOfConfig":"28"},{"size":1710,"mtime":1613423759346,"results":"50","hashOfConfig":"28"},{"size":500,"mtime":1613301083095,"results":"51","hashOfConfig":"28"},{"size":1122,"mtime":1613301083259,"results":"52","hashOfConfig":"28"},{"size":766,"mtime":1613301083276,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1gfwtnb",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\index.js",[],["112","113"],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Reducers.ts",[],["114","115"],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\App.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\AppSettingsReducer.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\MyDataReducer.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileReducer.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UsersReducer.ts",["116"],"import { ThunkAction } from 'redux-thunk'\nimport { instance } from '../api'\nimport { AppStateType, InferActionsTypes } from '../Reducers'\nimport { UserType } from '../../Types/Types'\nimport { UsersAPI } from './UsersAPI'\n\nconst LOAD = 'usersReducer/LOAD_USERS'\nconst UNFOLLOW = 'usersReducer/UNFOLLOW'\nconst FOLLOW = 'usersReducer/FOLLOW'\nconst DISABLE = 'usersReducer/DISABLE'\nconst ENABLE = 'usersReducer/ENABLE'\nconst UPDATE_PAGE = 'usersReducer/UPDATE_PAGE'\nconst SET_FILTER = 'usersReducer/SET_TERM'\nconst SET_TOTAL_COUNT = 'usersReducer/SET_TOTAL_COUNT'\n\nconst initialState = {\n  items: [] as Array<UserType>,\n  totalCount: 0,\n  usersOnPage: 30,\n  disableButtons: [] as Array<number>,\n  currentPage: 1,\n  filter: {\n    term: '',\n    friend: null as boolean | null,\n  },\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const UsersReducer = (\n  state = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case LOAD:\n      return { ...state, items: action.payload }\n    case SET_TOTAL_COUNT:\n      return { ...state, totalCount: action.payload }\n    case FOLLOW:\n      return {\n        ...state,\n        items: state.items.map((user) =>\n          user.id !== action.payload ? user : { ...user, followed: true }\n        ),\n      }\n    case UNFOLLOW:\n      return {\n        ...state,\n        items: state.items.map((user) =>\n          user.id !== action.payload ? user : { ...user, followed: false }\n        ),\n      }\n    case DISABLE:\n      return {\n        ...state,\n        disableButtons: [...state.disableButtons, action.payload],\n      }\n    case UPDATE_PAGE:\n      return { ...state, currentPage: action.payload }\n    case SET_FILTER:\n      return { ...state, filter: action.payload }\n    case ENABLE:\n      return {\n        ...state,\n        disableButtons: state.disableButtons.filter(\n          (button) => button !== action.payload\n        ),\n      }\n    default:\n      return state\n  }\n}\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\nexport const actions = {\n  loadUsers: (users: Array<UserType>) =>\n    ({ type: LOAD, payload: users } as const),\n  setTotalCount: (pages: number) =>\n    ({ type: SET_TOTAL_COUNT, payload: pages } as const),\n  updateFollowUser: (userId: number) =>\n    ({ type: FOLLOW, payload: userId } as const),\n  updateUnfollowUser: (userId: number) =>\n    ({ type: UNFOLLOW, payload: userId } as const),\n  disableFollowButton: (userId: number) =>\n    ({ type: DISABLE, payload: userId } as const),\n  enableFollowButton: (userId: number) =>\n    ({ type: ENABLE, payload: userId } as const),\n  updateCurrentPage: (page: number) =>\n    ({ type: UPDATE_PAGE, payload: page } as const),\n  setFilter: (term: string, friend: boolean | null) =>\n    ({ type: SET_FILTER, payload: { term, friend } } as const),\n}\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\n\nexport const requestUsers = (\n  page = 1,\n  usersOnPage = initialState.usersOnPage,\n  term = '',\n  friend: any = null\n): ThunkType => async (dispatch) => {\n  let response = await UsersAPI.getUsers(page, usersOnPage, term, friend)\n\n  dispatch(actions.setFilter(term, friend))\n  dispatch(actions.updateCurrentPage(page))\n  dispatch(actions.loadUsers(response.items))\n  dispatch(actions.setTotalCount(response.totalCount))\n}\n\nconst sendFollowRequest = (\n  request: any,\n  userId: number,\n  action: (id: number) => void\n) => async (dispatch: any) => {\n  dispatch(actions.disableFollowButton(userId))\n\n  let response = await request(userId)\n  dispatch(actions.enableFollowButton(userId))\n\n  if (response.resultCode === 0) dispatch(action(userId))\n}\n\nexport const followUser = (userId: number): ThunkType =>\n  sendFollowRequest(UsersAPI.followUser, userId, actions.updateFollowUser)\n\nexport const unfollowUser = (userId: number): ThunkType =>\n  sendFollowRequest(UsersAPI.unfollowUser, userId, actions.updateUnfollowUser)\n","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\PostsReducer.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Selectors\\Selectors.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Profile.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\Auth.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\Users.tsx",["117"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestUsers, followUser, unfollowUser } from './UsersReducer'\nimport {\n  getAuthInfo,\n  getCurrentPage,\n  getDefaultImage,\n  getDisableButtons,\n  getUsers,\n  getUsersOnPage,\n} from '../../Selectors/Selectors'\nimport { UserType } from '../../Types/Types'\nimport Paginator from './Paginator'\nimport UserCard from './UserCard'\nimport { UserFillter } from './UserFillter'\n\nexport const Users: React.FC = () => {\n  const usersList = useSelector(getUsers)\n  const defaultImage = useSelector(getDefaultImage)\n  const isAuth = useSelector(getAuthInfo)\n  const disableButtons = useSelector(getDisableButtons)\n  const currentPage = useSelector(getCurrentPage)\n  const usersOnPage = useSelector(getUsersOnPage)\n\n  const dispatch = useDispatch()\n\n  const submitFollowUser = (userId: number) => {\n    dispatch(followUser(userId))\n  }\n  const submitUnfollowUser = (userId: number) => {\n    dispatch(unfollowUser(userId))\n  }\n\n  const handleRequestUsers = (\n    page = 1,\n    term: string,\n    usersOnPage: any,\n    friend: string\n  ) => {\n    dispatch(requestUsers(page, usersOnPage, term, friend))\n  }\n\n  useEffect(() => {\n    handleRequestUsers(1, '', usersOnPage, 'null')\n  }, [])\n\n  const showUsers = () => {\n    return usersList.map((user: UserType) => {\n      return (\n        <UserCard\n          key={user.id}\n          isAuth={isAuth}\n          disableButtons={disableButtons}\n          userData={user}\n          followUser={submitFollowUser}\n          defaultImage={defaultImage}\n          unfollowUser={submitUnfollowUser}\n        />\n      )\n    })\n  }\n\n  return (\n    <div className='row usersList'>\n      <UserFillter requestUsers={handleRequestUsers} />\n      {usersList.length === 0 ? (\n        <div>The list is empty</div>\n      ) : (\n        <>\n          <Paginator currentPage={currentPage} usersOnPage={usersOnPage} />\n          <ul>{showUsers()}</ul>\n        </>\n      )}\n    </div>\n  )\n}\n","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Navbar\\Navbar.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Auth\\AuthDAL.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UsersAPI.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileDAL.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileData.tsx",["118"],"import React, { useState } from 'react'\nimport Status from './Status/Status'\nimport ProfileDataEditor from './ProfileDataEditor'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getProfileData } from '../../Selectors/Selectors'\nimport { sendProfileData, sendStatus } from './ProfileReducer'\nimport { ProfileType } from '../../Types/Types'\n\ntype PropsType = {\n  owner: boolean\n}\n\nconst ProfileData: React.FC<PropsType> = React.memo(({ owner }) => {\n  const profileData = useSelector(getProfileData)\n  const dispatch = useDispatch()\n\n  const [editMode, setEditMode] = useState(false)\n\n  const editDataButton = () => {\n    return (\n      <div className='card-action'>\n        <a href='#' className='modal-trigger' onClick={() => setEditMode(true)}>\n          Edit Data\n        </a>\n      </div>\n    )\n  }\n\n  const handleSendProfileData = (data: ProfileType) => {\n    dispatch(sendProfileData(data))\n  }\n\n  const showProfileData = () => {\n    if (editMode) {\n      return (\n        <ProfileDataEditor\n          sendProfileData={handleSendProfileData}\n          userId={profileData.userId}\n          setEditMode={setEditMode}\n        />\n      )\n    } else {\n      return (\n        <div className='card-content'>\n          <div>About Me: {profileData.aboutMe || '...'}</div>\n          <div>My skills: {profileData.lookingForAJobDescription || '...'}</div>\n          {profileData.lookingForAJob && <div>Looking for a job</div>}\n        </div>\n      )\n    }\n  }\n\n  const handleSendStatus = (status: string, userId: number) => {\n    dispatch(sendStatus(status, userId))\n  }\n\n  return (\n    <div className='card-stacked'>\n      <div className='card-content'>\n        <h5 className='card-title'>{profileData.fullName}</h5>\n        <Status\n          profileData={profileData}\n          sendStatus={handleSendStatus}\n          owner={owner}\n        />\n      </div>\n      {showProfileData()}\n      {owner && editDataButton()}\n    </div>\n  )\n})\n\nexport default ProfileData\n","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\Posts.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UserCard.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\UserFillter.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Users\\Paginator.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\api.ts",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\ProfileDataEditor.tsx",["119","120","121","122"],"import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport { ProfileType } from '../../Types/Types'\n\ntype FormData = {\n  fullName: string\n  lookingForAJobDescription: string\n  lookingForAJob: boolean\n  aboutMe: string\n}\n\ntype PropsType = {\n  userId: number\n  sendProfileData: (profileData: ProfileType) => void\n  setEditMode: (isEditor: boolean) => void\n}\n\nconst ProfileDataEditor: React.FC<PropsType> = ({ sendProfileData, userId, setEditMode, }) => {\n  const { handleSubmit, register } = useForm<FormData>()\n\n  const onSubmit = handleSubmit((data) => {\n    const { fullName, aboutMe, lookingForAJobDescription, lookingForAJob } = data\n    setEditMode(false)\n    sendProfileData({ ...data, userId })\n  })\n\n  return (\n    <form onSubmit={onSubmit} className='dataEditor'>\n      <div>\n        <input\n          type='text'\n          name='fullName'\n          ref={register}\n          autoFocus={true}\n          placeholder='Full Name'\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          name='aboutMe'\n          ref={register}\n          placeholder='About Me'\n        />\n      </div>\n      <div>\n        <input\n          type='text'\n          name='lookingForAJobDescription'\n          ref={register}\n          placeholder='My skills'\n        />\n      </div>\n      <div>\n        <label htmlFor='lookingForAJob'>\n          <input\n            id='lookingForAJob'\n            className='filled-in'\n            type='checkbox'\n            name='lookingForAJob'\n            ref={register}\n          />\n          <span>Looking for a job</span>\n        </label>\n      </div>\n      <input className='btn' type='submit' />\n    </form>\n  )\n}\nexport default ProfileDataEditor\n","C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Posts\\AddPostForm.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Status\\Status.tsx",[],"C:\\Users\\frank\\Desktop\\projects\\type-network\\src\\Components\\Profile\\Status\\StatusEditor.tsx",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":45,"column":6,"nodeType":"133","endLine":45,"endColumn":8,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":22,"column":9,"nodeType":"137","endLine":22,"endColumn":81},{"ruleId":"127","severity":1,"message":"138","line":22,"column":13,"nodeType":"129","messageId":"130","endLine":22,"endColumn":21},{"ruleId":"127","severity":1,"message":"139","line":22,"column":23,"nodeType":"129","messageId":"130","endLine":22,"endColumn":30},{"ruleId":"127","severity":1,"message":"140","line":22,"column":32,"nodeType":"129","messageId":"130","endLine":22,"endColumn":57},{"ruleId":"127","severity":1,"message":"141","line":22,"column":59,"nodeType":"129","messageId":"130","endLine":22,"endColumn":73},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'instance' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleRequestUsers' and 'usersOnPage'. Either include them or remove the dependency array.","ArrayExpression",["144"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'fullName' is assigned a value but never used.","'aboutMe' is assigned a value but never used.","'lookingForAJobDescription' is assigned a value but never used.","'lookingForAJob' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [handleRequestUsers, usersOnPage]",{"range":"147","text":"148"},[1272,1274],"[handleRequestUsers, usersOnPage]"]